package Seminar4;

import java.util.*;
// üìå 1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// üìå 2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.

public class Task1 {
    public static long getArrayTimeFirst(int count){
        ArrayList<Integer> arr = new ArrayList<Integer>();
        Date date = new Date();
        for (int i = 0; i < count; i++) {
            arr.addFirst(i);
        }
        Date date2 = new Date();
        long time = date2.getTime() - date.getTime();
        return time;
    }
    public static long getLinkedTimeFirst(int count){
        LinkedList<Integer> link = new LinkedList<Integer>();
        Date date = new Date();
        for (int i = 0; i < count; i++) {
            link.addFirst(i);
        }
        Date date2 = new Date();
        long time = date2.getTime() - date.getTime();
        return time;
    }

    public static long getArrayTimeMiddle(int count){
        ArrayList<Integer> arr = new ArrayList<Integer>();
        Date date = new Date();
        for (int i = 0; i < count; i++) {
            arr.add(arr.size()/2, i);
        }
        Date date2 = new Date();
        long time = date2.getTime() - date.getTime();
        return time;
    }
    public static long getLinkedTimeMiddle(int count){
        LinkedList<Integer> link = new LinkedList<Integer>();
        Date date = new Date();
        for (int i = 0; i < count; i++) {
            link.add(link.size()/2, i);
        }
        Date date2 = new Date();
        long time = date2.getTime() - date.getTime();
        return time;
    }



    public static long getArrayTimeLast(int count){
        ArrayList<Integer> arr = new ArrayList<Integer>();
        Date date = new Date();
        for (int i = 0; i < count; i++) {
            arr.addLast(i);
        }
        Date date2 = new Date();
        long time = date2.getTime() - date.getTime();
        return time;
    }
    public static long getLinkedTimeLast(int count){
        LinkedList<Integer> link = new LinkedList<Integer>();
        Date date = new Date();
        for (int i = 0; i < count; i++) {
            link.addLast(i);
        }
        Date date2 = new Date();
        long time = date2.getTime() - date.getTime();
        return time;
    }

    public static void printTime(long time){
        long m = 0, s = 0, ms = 0;
        if (time < 1000) {
            ms = time;
            System.out.println(ms + "–º—Å");
        }
        else if (time == 1000) {
            s = time / 1000;
            System.out.println(s + "—Å");
        }
        else if (time > 1000 && time < 60000){
            s = time / 1000;
            ms = time % 1000;
            System.out.println(s + "—Å " + ms + "–º—Å");
        }
        else if (time == 60000) {
            m = time / 60000;
            System.out.println(m + "–º");
        }
        else if (time > 60000 && time < 360000) {
            m = time / 60000;
            if ((time % 60000)/1000 != 0) {
                s = (time % 60000) / 1000;
                ms = (time % 60000) % 1000;
                 System.out.println(m + "–º " + s + "—Å " + ms + "–º—Å");
            }
            else if (((time % 60000)%1000 != 0) && ((time % 60000)/1000 == 0))  {
                ms = (time % 60000) % 1000;
                System.out.println(m + "–º " + ms + "–º—Å");
            }
            else {
                s = (time % 60000) / 1000;
                System.out.println(m + "–º " + s + "—Å ");
            }
        }
    }

    public static void differend(long timeFirst, long timeSecond){
        if (timeFirst < timeSecond) {
            long differend = timeSecond - timeFirst;
            System.out.print("ArrayList –±—ã—Å—Ç—Ä–µ–µ LinkedList –Ω–∞ ");
            printTime(differend);
        } else if (timeFirst > timeSecond) {
            long differend = timeFirst - timeSecond;
            System.out.print("LinkedList –±—ã—Å—Ç—Ä–µ–µ ArrayList –Ω–∞ ");
            printTime(differend);
        } else System.out.print("LinkedList –∏ ArrayList –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é");
    }

    public static void main(String[] args) {
        int count = 200000;

        long timeArr = getArrayTimeFirst(count);
        long timeLink = getLinkedTimeFirst(count);
        System.out.print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ. ArrayList –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ ");
        printTime(timeArr);
        System.out.print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ. LinkedList –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ ");
        printTime(timeLink);
        differend(timeArr, timeLink);
        System.out.println();

        timeArr = getArrayTimeMiddle(count);
        timeLink = getLinkedTimeMiddle(count);
        System.out.print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É. ArrayList –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ ");
        printTime(timeArr);
        System.out.print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É. LinkedList –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ ");
        printTime(timeLink);
        differend(timeArr, timeLink);
        System.out.println();

        timeArr = getArrayTimeLast(count);
        timeLink = getLinkedTimeLast(count);
        System.out.print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü. ArrayList –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ ");
        printTime(timeArr);
        System.out.print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü. LinkedList –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ ");
        printTime(timeLink);
        differend(timeArr, timeLink);
    }
}
